// Code generated by MockGen. DO NOT EDIT.
// Source: io.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hugo.rojas/custom-api/internal/domain/entities"
)

// MockIO is a mock of IO interface.
type MockIO struct {
	ctrl     *gomock.Controller
	recorder *MockIOMockRecorder
}

// MockIOMockRecorder is the mock recorder for MockIO.
type MockIOMockRecorder struct {
	mock *MockIO
}

// NewMockIO creates a new mock instance.
func NewMockIO(ctrl *gomock.Controller) *MockIO {
	mock := &MockIO{ctrl: ctrl}
	mock.recorder = &MockIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIO) EXPECT() *MockIOMockRecorder {
	return m.recorder
}

// FilterUsers mocks base method.
func (m *MockIO) FilterUsers(ctx context.Context) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterUsers", ctx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUsers indicates an expected call of FilterUsers.
func (mr *MockIOMockRecorder) FilterUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUsers", reflect.TypeOf((*MockIO)(nil).FilterUsers), ctx)
}

// LoginUser mocks base method.
func (m *MockIO) LoginUser(ctx context.Context, user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIOMockRecorder) LoginUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIO)(nil).LoginUser), ctx, user)
}

// SaveRoom mocks base method.
func (m *MockIO) SaveRoom(ctx context.Context, room *entities.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoom", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoom indicates an expected call of SaveRoom.
func (mr *MockIOMockRecorder) SaveRoom(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoom", reflect.TypeOf((*MockIO)(nil).SaveRoom), ctx, room)
}
