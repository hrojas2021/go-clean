// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/hugo.rojas/custom-api/internal/domain/entities"
	models "github.com/hugo.rojas/custom-api/internal/domain/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetSecret mocks base method.
func (m *MockService) GetSecret() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockServiceMockRecorder) GetSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockService)(nil).GetSecret))
}

// ListUser mocks base method.
func (m *MockService) ListUser(ctx context.Context) ([]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockServiceMockRecorder) ListUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockService)(nil).ListUser), ctx)
}

// Login mocks base method.
func (m *MockService) Login(arg0 context.Context, arg1 models.User) (*models.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*models.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), arg0, arg1)
}

// SaveRoom mocks base method.
func (m *MockService) SaveRoom(ctx context.Context, room *models.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRoom", ctx, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRoom indicates an expected call of SaveRoom.
func (mr *MockServiceMockRecorder) SaveRoom(ctx, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRoom", reflect.TypeOf((*MockService)(nil).SaveRoom), ctx, room)
}
